/**
 * @FileName: {tableName}ServiceImpl.java
 * @Package: com.ziroom.{systemName}.{webModuleName}.service.impl
 * @author {author}
 * @created {dateTime}
 * <p>
 * Copyright {year} ziroom
 */
package com.ziroom.{systemName}.{webModuleName}.service.impl;

import com.asura.framework.base.paging.PagingResult;
import com.ziroom.{systemName}.entity.{tableName}Entity;
import com.ziroom.{systemName}.{webModuleName}.entity.request.{tableName}WriteRequest;
import com.ziroom.{systemName}.{webModuleName}.entity.value.{tableName}Value;
import com.ziroom.{systemName}.{webModuleName}.service.{tableName}Service;
import com.ziroom.{systemName}.{webModuleName}.service.dubbo.{tableName}DubboService;
import com.ziroom.{systemName}.{moduleName}.dto.{tableNameAcronym}.{tableName}DeleteRequest;
import com.ziroom.{systemName}.{moduleName}.dto.{tableNameAcronym}.{tableName}InsertRequest;
import com.ziroom.{systemName}.{moduleName}.dto.{tableNameAcronym}.{tableName}UpdateRequest;
import com.ziroom.{systemName}.{moduleName}.entity.options.{tableName}SearchOptions;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.List;

/**
 * <p></p>
 *
 * <PRE>
 * <BR>	修改记录
 * <BR>-----------------------------------------------
 * <BR>	修改日期			修改人			修改内容
 * </PRE>
 *
 * @author {author}
 * @since 1.0
 * @version 1.0
 */
@Service("{webStandardName}.{tableLittleName}Service")
public class {tableName}ServiceImpl implements {tableName}Service {

    @Resource(name = "{webStandardName}.{tableLittleName}DubboService")
    private {tableName}DubboService {tableLittleName}DubboService;

    @Override
    public PagingResult<{tableName}Entity> search({tableName}SearchOptions options) {
        return {tableLittleName}DubboService.search(options);
    }

    @Override
    public {tableName}Entity findByLogicCode(String logicCode) {
        return {tableLittleName}DubboService.findByLogicCode(logicCode);
    }

    @Override
    public {tableName}Entity insert({tableName}WriteRequest request) {
        {tableName}InsertRequest insertRequest = new {tableName}InsertRequest();
        insertRequest.setOperatorCode(request.getOperatorCode());
        return {tableLittleName}DubboService.insert(insertRequest);
    }

    @Override
    public void update({tableName}WriteRequest request) {
        {tableName}UpdateRequest updateRequest = new {tableName}UpdateRequest();
        updateRequest.setLogicCode(request.getLogicCode());
        updateRequest.setOperatorCode(request.getOperatorCode());
        {tableLittleName}DubboService.update(updateRequest);
    }

    @Override
    public void insertOrUpdate({tableName}WriteRequest request) {
        if (request.getLogicCode() == null || request.getLogicCode().equals("")) {
            insert(request);
        } else {
            update(request);
        }
    }

    @Override
    public void softDelete({tableName}DeleteRequest request) {
        {tableLittleName}DubboService.softDelete(request);
    }

    @Override
    public PagingResult<{tableName}Value> searchForView({tableName}SearchOptions options) {
        final PagingResult<{tableName}Entity> results = search(options);
        List<{tableName}Value> finalResults = new ArrayList<{tableName}Value>() {{
            for ({tableName}Entity entity : results.getRows()) {
                {tableName}Value value = new {tableName}Value();
                value.setLogicCode(entity.getLogicCode());
                add(value);
            }
        }};
        return new PagingResult<>(results.getTotal(), finalResults);
    }
}