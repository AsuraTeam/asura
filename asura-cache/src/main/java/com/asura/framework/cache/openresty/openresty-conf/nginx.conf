
#user  nobody;
worker_processes  8;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    use epoll;
    worker_connections  102400;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    lua_shared_dict redis_server_md5 10m;
    lua_shared_dict redis_server_data_info 10m;
    lua_shared_dict redis_remove_server 1m;
    lua_shared_dict redis_server_config 1m;

    lua_shared_dict server_md5 5m;
    lua_shared_dict server_data_info 5m;
    lua_shared_dict remove_server 1m;
    lua_shared_dict server_config 1m;

    #gzip  on;
upstream memcache {
server 192.168.0.31:8888;
server 192.168.0.17:8888;
}

    server {

           server_name picture.lvye.com;
           listen 8081;

           location / {
             root /dev/shm;
           }

     }

    server {
        listen       8888;
        listen       8889;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        location /lua {
             client_body_buffer_size 50m;
             lua_need_request_body on;
             client_max_body_size 20m;
             default_type 'text/plain';
             content_by_lua_file  conf/save_picture.lua ;
        }
    
        location /memcache {
            rewrite ^(.*)$ /lua_memcached;
            proxy_pass http://memcache;
        }


        location /lua_memcached {
             lua_need_request_body on;
             default_type 'text/plain';
             content_by_lua_file  conf/memcache.lua ;
        }


        location /lua_redis{
             lua_need_request_body on;
             default_type 'text/plain';
             content_by_lua_file  conf/redis.lua ;
        }

   
        location /lua_var {
            default_type 'text/plain';
            content_by_lua 'ngx.say(ngx.crc32_short(math.random()))';
        }


        location /post_data {
             lua_need_request_body on;

             content_by_lua "
                              local args = ngx.req.get_post_args()
                              local data = string.gsub(args.data,' ','+')
                              local d = ngx.decode_base64(data)
                              ngx.say(d)
                             ";

        } 

        location /lua_var2 {
            default_type 'text/plain';
            set_by_lua_file $res conf/lua_var2.lua;
            echo $res;
        }

        location /uri {
             default_type 'text/plain';
             #content_by_lua 'ngx.print(ngx.localtime())';

        }


        location /lua_rewrite {
              set $a 12; # create and initialize $a
              set $b ""; # create and initialize $b
              rewrite_by_lua '
                               ngx.var.b = tonumber(ngx.var.a) + 1
                              if tonumber(ngx.var.b) == 13 then
                                  return ngx.exec("http://www.baidu.com")
                                  --return ngx.exec("/uri",ngx.req.get_uri_args()) --url不跳转
                                  --return ngx.redirect("/uri") 重定向
                              end
                             ';
               echo "res = $b";
        }

        location /lua_get_method {
           content_by_lua '
                            local method = ngx.req.get_method()
                            ngx.say(method)
                         ';
        }

        # 图片上传处理
        location /upload_picture1 {
           default_type 'text/plain';
           client_max_body_size 100m;
           client_body_buffer_size 50m;
           set_by_lua_file $res conf/upload_picture.lua;
        }

        location /lua_get_body_file {
           lua_need_request_body on;
           client_max_body_size 50k;
           client_body_buffer_size 50k;
           content_by_lua '
                            local body = ngx.req.get_body_data()
                            local data = ngx.req.get_body_file()
                             local file = os.tmpname()
                            if body then
                                 local fh = io.open(file,"w") 
                                 fh:write(body)
                                 fh:close()
                            end
                            ngx.say(file)
                          ';
        }
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

    }


    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
#http://wiki.nginx.org/HttpLuaModule#rewrite_by_lua
